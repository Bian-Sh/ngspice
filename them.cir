* nupa

* (exec-spice "ngspice %s")
* (compile "cd ../w32 && LC_ALL=C make -k -j7")

* (loop
*    for re in '("^vt_[0-9]+ + nt_[0-9]+ +"
*                "^vg_[0-9]+ + ng_[0-9]+ +")
*    for subst in '("vt_%04d  nt_%04d "
*                   "vg_%04d  ng_%04d ")
*    do (save-excursion
*         (loop
*            for i from 1001
*            while (re-search-forward re nil t)
*            do (replace-match (format subst i i)))))

* ----------------------------------------
* arbitrary tests

vt_1001  nt_1001 0  '1+2'
vt_1002  nt_1002 0  '1 + 2 '
vt_1003  nt_1003 0  '1+2*3'
vt_1004  nt_1004 0  '(1?2:3)+100'
vt_1005  nt_1005 0  '(1>2?2*4:1+2*3)+100'

vg_1001  ng_1001 0  '3'
vg_1002  ng_1002 0  '3'
vg_1003  ng_1003 0  '7'
vg_1004  ng_1004 0  '102'
vg_1005  ng_1005 0  '107'


* ----------------------------------------
* `&&' operator
*   output: evaluates to 0.0 and 1.0
*   input:  0.0 is false, everything else is true

vt_1006  nt_1006 0  '0 && 0'
vt_1007  nt_1007 0  '0 && 1'
vt_1008  nt_1008 0  '1 && 0'
vt_1009  nt_1009 0  '0.1 && 0.2'
vt_1010  nt_1010 0  '-0.1 && 0.2'

vg_1006  ng_1006 0  '0'
vg_1007  ng_1007 0  '0'
vg_1008  ng_1008 0  '0'
vg_1009  ng_1009 0  '1'
vg_1010  ng_1010 0  '1'


* ----------------------------------------
* `||' operator
*   output: evaluates to 0.0 and 1.0
*   input:  0.0 is false, everything else is true

vt_1011  nt_1011 0  '0 || 0'
vt_1012  nt_1012 0  '0 || 0.1'
vt_1013  nt_1013 0  '-0.1 || 0'
vt_1014  nt_1014 0  '0.1 || -0.2'

vg_1011  ng_1011 0  '0'
vg_1012  ng_1012 0  '1'
vg_1013  ng_1013 0  '1'
vg_1014  ng_1014 0  '1'


* ----------------------------------------
* comparison operators
*   output: evaluates to 0.0 and 1.0

* ----------
* `>'

vt_1015  nt_1015 0  '3 > 2'
vt_1016  nt_1016 0  '2 > 3'
vt_1017  nt_1017 0  '2 > 2'

vg_1015  ng_1015 0  '1'
vg_1016  ng_1016 0  '0'
vg_1017  ng_1017 0  '0'


* ----------
* '<'

vt_1018  nt_1018 0  '3 < 2'
vt_1019  nt_1019 0  '2 < 3'
vt_1020  nt_1020 0  '2 < 2'

vg_1018  ng_1018 0  '0'
vg_1019  ng_1019 0  '1'
vg_1020  ng_1020 0  '0'


* ----------
* '<='

vt_1021  nt_1021 0  '3 >= 2'
vt_1022  nt_1022 0  '2 >= 3'
vt_1023  nt_1023 0  '2 >= 2'

vg_1021  ng_1021 0  '1'
vg_1022  ng_1022 0  '0'
vg_1023  ng_1023 0  '1'


* ----------
* '>='

vt_1024  nt_1024 0  '3 <= 2'
vt_1025  nt_1025 0  '2 <= 3'
vt_1026  nt_1026 0  '2 <= 2'

vg_1024  ng_1024 0  '0'
vg_1025  ng_1025 0  '1'
vg_1026  ng_1026 0  '1'


* ----------
* '=='

vt_1027  nt_1027 0  '3 == 2'
vt_1028  nt_1028 0  '2 == 3'
vt_1029  nt_1029 0  '2 == 2'

vg_1027  ng_1027 0  '0'
vg_1028  ng_1028 0  '0'
vg_1029  ng_1029 0  '1'


* ----------
*  '!='

vt_1030  nt_1030 0  '3 != 2'
vt_1031  nt_1031 0  '2 != 3'
vt_1032  nt_1032 0  '2 != 2'

vg_1030  ng_1030 0  '1'
vg_1031  ng_1031 0  '1'
vg_1032  ng_1032 0  '0'


* ----------------------------------------
* `!' operator
*   output: evaluates to 0.0 and 1.0
*   input:  0.0 is false, everything else is true

* fixme, disabled
*vt_1015  nt_1015 0  '! 0.0'
*vt_1016  nt_1016 0  '! 0.1'
*vt_1017  nt_1017 0  '! -0.1'

vt_1033  nt_1033 0  '1'
vt_1034  nt_1034 0  '0'
vt_1035  nt_1035 0  '0'

vg_1033  ng_1033 0  '1'
vg_1034  ng_1034 0  '0'
vg_1035  ng_1035 0  '0'


* ----------------------------------------
* ternary 'c ? x : y' operator
*   input:  0.0 is false, everything else is true

vt_1036  nt_1036 0  '0.1 ? 42 : 43'
vt_1037  nt_1037 0  '-0.1 ? 42 : 43'
vt_1038  nt_1038 0  '0 ? 42 : 43'

vg_1036  ng_1036 0  '42'
vg_1037  ng_1037 0  '42'
vg_1038  ng_1038 0  '43'

* assoziativity

vt_1039  nt_1039 0  '1 ? 42 : 1 ? 41 : 40'
vt_1040  nt_1040 0  '1 ? 42 : 0 ? 41 : 40'
vt_1041  nt_1041 0  '0 ? 42 : 1 ? 41 : 40'
vt_1042  nt_1042 0  '0 ? 42 : 0 ? 41 : 40'

vg_1039  ng_1039 0  '42'
vg_1040  ng_1040 0  '42'
vg_1041  ng_1041 0  '41'
vg_1042  ng_1042 0  '40'

* regression tests
*   these failed in the past, due to incorrect transformations in inpcom.c

*   was incorrectly transformed --> (3>2)||ternary_fcn((1<4),0.2,0.3)
vt_1043  nt_1043 0  '(3>2)||(1<4) ? 0.2 : 0.3'

*   was incorrectly transformed --> controlled_exit()
vt_1044  nt_1044 0  '(3>2) ? (3+2)*((2>1)?1:1) : 42'

*   was incorrectly transformed --> ternary_fcn((3>2),42,(2*2))3
vt_1045  nt_1045 0  '(3>2) ? 42 : (2*2)+3'

vg_1043  ng_1043 0  '0.2'
vg_1044  ng_1044 0  '5'
vg_1045  ng_1045 0  '42'

* ----------------------------------------
* `^' operator
*   spicy version (not the mathematical version) of a `power' operator
*     x==0 --> 0
*     x>0  --> x raised to y
*     x<0  --> x raised to integer part of y, (trunc(y), that is, towards 0)

vt_1046  nt_1046 0  '2 ^ 3'
vt_1047  nt_1047 0  '2 ^ -3'
vt_1048  nt_1048 0  '(-2) ^ 3'
vt_1049  nt_1049 0  '(-2) ^ -3'
vt_1050  nt_1050 0  '2 ^ 0'
vt_1051  nt_1051 0  '2 ^ 0.5'
vt_1052  nt_1052 0  '0 ^ 2'

vg_1046  ng_1046 0  '8'
vg_1047  ng_1047 0  '0.125'
vg_1048  ng_1048 0  '-8'
vg_1049  ng_1049 0  '-0.125'
vg_1050  ng_1050 0  '1'
vg_1051  ng_1051 0  '1.4142135623730951'
vg_1052  ng_1052 0  '0'


vt_1053  nt_1053 0  '(-2) ^ 2.9'
vt_1054  nt_1054 0  '(-2) ^ 3.1'

vg_1053  ng_1053 0  '4'
vg_1054  ng_1054 0  '-8'


* precedence of '-' versus '^'
vt_1055  nt_1055 0  '-2^2'
vg_1055  ng_1055 0  '-4'


* ----------------------------------------
* `**' operator
*   is the same as '^'

vt_1056  nt_1056 0  '2 ** 3'
vt_1057  nt_1057 0  '2 ** -3'
vt_1058  nt_1058 0  '(-2) ** 3'
vt_1059  nt_1059 0  '(-2) ** -3'
vt_1060  nt_1060 0  '2 ** 0'
vt_1061  nt_1061 0  '2 ** 0.5'
vt_1062  nt_1062 0  ' 0 ** 2'

vg_1056  ng_1056 0  '8'
vg_1057  ng_1057 0  '0.125'
vg_1058  ng_1058 0  '-8'
vg_1059  ng_1059 0  '-0.125'
vg_1060  ng_1060 0  '1'
vg_1061  ng_1061 0  '1.4142135623730951'
vg_1062  ng_1062 0  '0'


* ----------------------------------------
* `pow(x,y)' function
*    x raised to integer part of y

vt_1063  nt_1063 0  'pow(2,3)'
vt_1064  nt_1064 0  'pow(2,3.1)'
vt_1065  nt_1065 0  'pow(2,2.9)'
vt_1066  nt_1066 0  'pow(2,-3)'
vt_1067  nt_1067 0  'pow(2,-3.1)'
vt_1068  nt_1068 0  'pow(2,-2.9)'
vt_1069  nt_1069 0  'pow(-2,3)'
vt_1070  nt_1070 0  'pow(-2,3.1)'
vt_1071  nt_1071 0  'pow(-2,2.9)'
vt_1072  nt_1072 0  'pow(-2,-3)'
vt_1073  nt_1073 0  'pow(-2,-3.1)'
vt_1074  nt_1074 0  'pow(-2,-2.9)'

vg_1063  ng_1063 0  '8'
vg_1064  ng_1064 0  '8'
vg_1065  ng_1065 0  '4'
vg_1066  ng_1066 0  '0.125'
vg_1067  ng_1067 0  '0.125'
vg_1068  ng_1068 0  '0.25'
vg_1069  ng_1069 0  '-8'
vg_1070  ng_1070 0  '-8'
vg_1071  ng_1071 0  '4'
vg_1072  ng_1072 0  '-0.125'
vg_1073  ng_1073 0  '-0.125'
vg_1074  ng_1074 0  '0.25'


* ----------------------------------------
* `pwr(x,y)' function
*    sign(x) * (|x| raised y)

vt_1075  nt_1075 0  'pwr(2,3)'
vt_1076  nt_1076 0  'pwr(2,3.1)'
vt_1077  nt_1077 0  'pwr(2,2.9)'
vt_1078  nt_1078 0  'pwr(2,-3)'
vt_1079  nt_1079 0  'pwr(2,-3.1)'
vt_1080  nt_1080 0  'pwr(2,-2.9)'
vt_1081  nt_1081 0  'pwr(-2,3)'
vt_1082  nt_1082 0  'pwr(-2,3.1)'
vt_1083  nt_1083 0  'pwr(-2,2.9)'
vt_1084  nt_1084 0  'pwr(-2,-3)'
vt_1085  nt_1085 0  'pwr(-2,-3.1)'
vt_1086  nt_1086 0  'pwr(-2,-2.9)'

vg_1075  ng_1075 0  '8'
vg_1076  ng_1076 0  '8.574187700290345'
vg_1077  ng_1077 0  '7.464263932294459'
vg_1078  ng_1078 0  '0.125'
vg_1079  ng_1079 0  '0.11662912394210093'
vg_1080  ng_1080 0  '0.13397168281703664'
vg_1081  ng_1081 0  '-8'
vg_1082  ng_1082 0  '-8.574187700290345'
vg_1083  ng_1083 0  '-7.464263932294459'
vg_1084  ng_1084 0  '-0.125'
vg_1085  ng_1085 0  '-0.11662912394210093'
vg_1086  ng_1086 0  '-0.13397168281703664'


* ----------------------------------------
* functions

vt_1087  nt_1087 0  'sin(0.3)'
vt_1088  nt_1088 0  'cos(0.3)'
vt_1089  nt_1089 0  'tan(0.3)'
vt_1090  nt_1090 0  'asin(0.3)'
vt_1091  nt_1091 0  'acos(0.3)'
vt_1092  nt_1092 0  'atan(0.3)'
vt_1093  nt_1093 0  'sinh(0.3)'
vt_1094  nt_1094 0  'cosh(0.3)'
vt_1095  nt_1095 0  'tanh(0.3)'
vt_1096  nt_1096 0  'asinh(0.3)'
vt_1097  nt_1097 0  'acosh(1.3)'
vt_1098  nt_1098 0  'atanh(0.3)'

vg_1087  ng_1087 0  '0.29552020666133955'
vg_1088  ng_1088 0  '0.955336489125606'
vg_1089  ng_1089 0  '0.30933624960962325'
vg_1090  ng_1090 0  '0.3046926540153975'
vg_1091  ng_1091 0  '1.266103672779499'
vg_1092  ng_1092 0  '0.29145679447786704'
vg_1093  ng_1093 0  '0.3045202934471426'
vg_1094  ng_1094 0  '1.0453385141288605'
vg_1095  ng_1095 0  '0.2913126124515909'
vg_1096  ng_1096 0  '0.2956730475634223'
vg_1097  ng_1097 0  '0.7564329108569595'
vg_1098  ng_1098 0  '0.3095196042031116'

* ----------------------------------------
* sqrt(x)
*   = sign(x) * sqrt(abs(x))

vt_1099  nt_1099 0  'sqrt(2.0)'
vt_1100  nt_1100 0  'sqrt(-2.0)'

vg_1099  ng_1099 0  '1.4142135623730951'
vg_1100  ng_1100 0  '-1.4142135623730951'

* ----------------------------------------
* functions

vt_1101  nt_1101 0  'abs(2.0)'
vt_1102  nt_1102 0  'abs(-2.0)'

vg_1101  ng_1101 0  '2'
vg_1102  ng_1102 0  '2'


vt_1103  nt_1103 0  'sgn(2.0)'
vt_1104  nt_1104 0  'sgn(0.0)'
vt_1105  nt_1105 0  'sgn(-2.0)'

vg_1103  ng_1103 0  '1'
vg_1104  ng_1104 0  '0'
vg_1105  ng_1105 0  '-1'


* fixme floor or trunc ?
vt_1106  nt_1106 0  'int(2.1)'
vt_1107  nt_1107 0  'int(1.9)'
vt_1108  nt_1108 0  'int(-1.9)'
vt_1109  nt_1109 0  'int(-2.1)'

vg_1106  ng_1106 0  '2'
vg_1107  ng_1107 0  '1'
vg_1108  ng_1108 0  '-1'
vg_1109  ng_1109 0  '-2'


* ----------------------------------------
* log(x)
*   = sign(x) * log(x)

vt_1110  nt_1110 0  'log(2.0)'
vt_1111  nt_1111 0  'log(0.5)'
vt_1112  nt_1112 0  'log(-0.5)'
vt_1113  nt_1113 0  'log(-2.0)'


vg_1110  ng_1110 0  '0.6931471805599453'
vg_1111  ng_1111 0  '-0.6931471805599453'
vg_1112  ng_1112 0  '0.6931471805599453'
vg_1113  ng_1113 0  '-0.6931471805599453'


* ----------------------------------------
* exp(x)

vt_1114  nt_1114 0  'exp(2.0)'
vt_1115  nt_1115 0  'exp(-2.0)'

vg_1114  ng_1114 0  '7.38905609893065'
vg_1115  ng_1115 0  '0.1353352832366127'


* ----------------------------------------
* min(a,b) max(a,b)

vt_1116  nt_1116 0  'min(1.1, 2.1)'
vt_1117  nt_1117 0  'max(1.1, 2.1)'

vg_1116  ng_1116 0  '1.1'
vg_1117  ng_1117 0  '2.1'


.control

define mismatch(a,b,err) abs(a-b)>err

op

let total_count = 0
let fail_count = 0

let tests = 1001 + vector(117)

foreach n $&tests
  if mismatch(v(nt_$n), v(ng_$n), 1e-9)
    let actual = v(nt_$n)
    let gold = v(ng_$n)
    echo "ERROR, test failure, v(nt_$n) = $&actual but should be $&gold"
    let fail_count = fail_count + 1
  end
  let total_count = total_count + 1
end

if fail_count > 0
  echo "ERROR: $&fail_count of $&total_count tests failed"
  quit 1
else
  echo "INFO: $&fail_count of $&total_count tests failed"
  quit 0
end

.endc

.end
